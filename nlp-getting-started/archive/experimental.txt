def remove_accented_chars_func(text):
    return ''.join([c for c in text if ord(c) < 128])#unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('utf-8', 'ignore')
# import unicodedata
# def convert_accented_chars_func(text):
#     return unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('utf-8', 'ignore')
def clean_repeating_char(text):
    text=re.sub(r'([a-zA-Z])\1\1+', r'\1\1', text,flags=re.I)#(.)\1{3,}
    text=re.sub(r'(\B:)(3)+', r'\1\2', text,flags=re.I)
    text = re.sub(r'\blo+l\b',"lol",text,flags=re.I)
    text = re.sub(r'go+a+l+','goal',text)
    text = re.sub(r'\bso+\b',"so",text,flags=re.I)
    text = re.sub(r'\bno+\b',"no",text,flags=re.I)
    text = re.sub(r'\bo+h+o*\b','oh',text,flags=re.I)
    text = re.sub(r'\ba+\b','a',text,flags=re.I)
    text = re.sub(r'\ba+ll\b','all',text,flags=re.I)
    text = re.sub(r'\ba+n+\b','an',text,flags=re.I)
    text = re.sub(r'\ba+n+d+\b','and',text,flags=re.I)
    text=re.sub(r'\bab+andon','abandon',text,flags=re.I)
    return text
from emo_dictonary import EMOTICONS
def remove_emoticon(text):
    for emot in EMOTICONS:
        if emot[0] in string.punctuation:
            if emot[-1] in string.punctuation:
                emoticon_pattern = r'\B'+emot+r'\B'
            else:
                emoticon_pattern = r'\B'+emot+r'\b'
        else:
            if emot[-1] not in string.punctuation:
                emoticon_pattern = r'\b'+emot+r'\b'
            else:
                emoticon_pattern = r'\b'+emot+r'\B' 
        text = re.sub(emoticon_pattern," ", text,flags=re.I)
    return text
def slang_spelling(text):
    text = re.sub(r"w/e", "whatever", text)
    text = re.sub(r"w/", "with", text)
    text = re.sub(r"(\bU.S.\B)|(\bU.S\b)", "United States", text)
    text = re.sub(r"\bUK\b", "United Kingdom", text)
    text = re.sub(r"recentlu", "recently", text)
    text = re.sub(r"Ph0tos", "Photos", text)
    text = re.sub(r"amirite", "am I right", text)
    text = re.sub(r"exp0sed", "exposed", text)
    text = re.sub(r"amageddon", "armageddon", text)
    text = re.sub(r"Trfc", "Traffic", text)
    text = re.sub(r"TRAUMATISED", "traumatized", text)
    text = re.sub(r"2k([0-9])([0-9])", r"20\1\2", text,flags=re.I)
    text = re.sub(r"\bwut\b", r"what", text,flags=re.I)
    text = re.sub(r"\byday\b", r"yesterday", text,flags=re.I)
    text = re.sub(r"\$hit", r"shit", text,flags=re.I)
    text = re.sub(r"\bint\'l\b", r"international", text)
    text = re.sub(r"\bgon\b", r"going to", text,flags=re.I)
    text = re.sub(r"\byday\b", r"yesterday", text,flags=re.I)
    text = re.sub(r'\baccidently\b',"accidentally",text)
    text = re.sub(r"\bStree\b",'street',text)
    text = re.sub(r"\blil\b",' little ',text)
    text = re.sub(r"\balil\b",' a little ',text)
    text = re.sub(r"\btxt\b",' text',text,flags=re.I)
    text = re.sub(r"\btyre\b",'tire',text,flags=re.I)
    text = re.sub(r"\bknw\b",'know',text,flags=re.I)
    text = re.sub(r"\b[Gg]ovt\b",'government',text)
    text = re.sub(r"\bd/t\b","due time",text)
    text = re.sub(r"\bb/c\b","because",text)
    text = re.sub(r"\bbcuz\b","because",text)
    text = re.sub(r"\bER\b","emergency room",text)
    text = re.sub(r"\bS3XLEAK",'SEX LEAK',text)
    text=re.sub(r"(\d+)(\s?)yr",r"\1 year",text)
    text = re.sub(r"\bsmh\b",'Shaking my head',text,flags=re.I)
    text = re.sub(r"view and download video",' ',text)
    text = re.sub(r"\bvia\b",' ',text,flags=re.I)
    return text
def clean_contractions(text):
    text=contractions.fix(text)
    text = re.sub(r"\bcant\b",'can not',text)
    text = re.sub(r"\bwont\b",'will not',text)
    text = re.sub(r"\bim\b",' I am ',text)
    text = re.sub(r"\bdidnt\b",' did not ',text)
    text = re.sub(r"\bcouldnt\b",'could not',text)
    text = re.sub(r"\bisnt\b",' is not ',text)
    text = re.sub(r"\bdont\b",' do not ',text)
    return text
def remove_irr_char_func(text):
    text=re.sub(r'[^a-zA-Z]', ' ', text)
    return text
chat_expressions = pd.read_csv('chat_expressions.csv', sep=',')
chat_expressions_dict = dict(zip(chat_expressions.Chat_Words, chat_expressions.Chat_Words_Extended))
def chat_words_to_norm_words_func(text):
    return re.sub(r'\S+', lambda m: chat_expressions_dict.get(m.group().upper(), m.group()) , text)
def remove_extra_whitespaces_func(text):
    return re.sub(r'^\s*|\s\s*', ' ', text).strip()